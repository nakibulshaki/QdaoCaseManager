@using Microsoft.AspNetCore.Components


<nav aria-label="Pagination">
    <ul class="pagination">
        @if (HasPreviousPage)
        {
            <li class="page-item">
                <a class="page-link" @onclick="PreviousPage">@PreviousPageText</a>
            </li>
        }
        else
        {
            <li class="page-item disabled">
                <a class="page-link " >@PreviousPageText</a>
            </li>
        }
        @for (int i = 1; i <= TotalPages; i++)
        {
            int currentPage = i; // Create a local variable to capture the current value of i

            <li class="page-item @((i == PageIndex) ? "active" : "")">
                <a class="page-link" @onclick="@(() => PageClick(currentPage))">@i</a>
            </li>
        }

        @if (HasNextPage)
        {
            <li class="page-item">
                <a class="page-link" @onclick="NextPage">@NextPageText</a>
            </li>
        }
        else
        {
            <li class="page-item disabled">
                <a class="page-link ">@NextPageText</a>
            </li>
        }
    </ul>
</nav>
@code {
    [Parameter]
    public int PageIndex { get; set; }
    [Parameter]

    public int PageSize { get; set; }
    [Parameter]

    public int TotalCount { get; set; }
    [Parameter]
    public EventCallback<int> OnPageChanged { get; set; }
    private string PreviousPageText { get; set; } = "Previous";

    private string NextPageText { get; set; } = "Next";

    private int TotalPages => (int)Math.Ceiling(TotalCount / (double)PageSize);
    private bool HasPreviousPage => PageIndex > 1;
    private bool HasNextPage => PageIndex < TotalPages;



    private async Task PreviousPage()
    {
        if (PageIndex > 1)
        {
            await OnPageChanged.InvokeAsync(PageIndex - 1);
        }
    }

    private async Task NextPage()
    {
        if (PageIndex < TotalPages)
        {
            await OnPageChanged.InvokeAsync(PageIndex + 1);
        }
    }

    private async Task PageClick(int page)
    {
        if (page != PageIndex)
        {
            await OnPageChanged.InvokeAsync(page);
        }
    }
}