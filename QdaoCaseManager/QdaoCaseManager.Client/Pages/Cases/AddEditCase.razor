﻿
@page "/case/add"
@page "/case/edit/{id:int}"
@using QdaoCaseManager.Dtos
@using QdaoCaseManager.Shared
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender:false))
@inject HttpClient Http
@inject NavigationManager NavigationManager
@if(Id == null)
{
    <h3>Create Case</h3>
    <PageTitle>Create  Case</PageTitle>
}
else
{
    <h3>Edit @CaseDto.Tittle</h3>
    <PageTitle>Create Case </PageTitle>

}

<EditForm Model="@CaseDto" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="CaseDto.Tittle" class="form-label">Tittle</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="CaseDto.Tittle" />
        </div>
        <ValidationMessage For="@(() => CaseDto.Tittle)" />
    </div>
    <div class="mb-3">
        <label for="CaseDto.Description" class="form-label">Description</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="CaseDto.Description" />
        </div>
        <ValidationMessage For="@(() => CaseDto.Description)" />
    </div>
    <div class="mb-3">
        <label for="Status" class="form-label">Status</label>
        <div class="col-md-4">
            <InputSelect class="form-control" @bind-Value="CaseDto.Status">
                @foreach (var status in Enum.GetValues<CaseStatus>())
                {
                    <option value="@status">@status.ToString()</option>
                }
            </InputSelect>
        </div>
        <ValidationMessage For="@(() => CaseDto.Status)" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button class="btn btn-light" @onclick="HandleCancel">Cancel</button>
    </div>
</EditForm>
@code {
    [Parameter]
    public int? Id { get; set; }
    public CreateUpdateCaseDto CaseDto { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        if(Id is not null)
        {
            var result = await Http.GetFromJsonAsync<CreateUpdateCaseDto>($"api/cases/{(int)Id}");
            if (result is not null) CaseDto = result;
        }

    }
    protected async Task HandleSubmit()
    {
        if (Id is not null)
        {
            await Http.PutAsJsonAsync($"api/cases/{Id}", CaseDto);

        }
        else{
            await Http.PostAsJsonAsync("api/cases", CaseDto);

        }
    }

    protected async Task HandleCancel()
    {
        NavigationManager.NavigateTo("/case");
    }
}
