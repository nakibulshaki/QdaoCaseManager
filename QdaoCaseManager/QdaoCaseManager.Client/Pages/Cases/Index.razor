@page "/case";
@using Microsoft.AspNetCore.Authorization
@using QdaoCaseManager.Client.Shared
@using QdaoCaseManager.Extra
@using QdaoCaseManager.Shared.Dtos
@attribute [Authorize]
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender:false))
@inject HttpClient HttpClient
<PageTitle>Case</PageTitle>

<h1>Case Data</h1>
<p>This component demonstrates CRUD operation on Case data</p>

<div class="row">
    <div class="col-md-6">
        <a href='/case/add' class="btn btn-primary" role="button">
            <i class="fas fa-plus"></i>
            Add Case
        </a>
    </div>
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Search case by Tittle"
               @bind="filter.SearchString" @bind:event="oninput" @onkeyup="LoadCases" />

    </div>
</div>
<br />

@if (Cases == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped align-middle table-bordered">
        <thead class="table-success">
            <tr>
                <th>ID</th>
                <th>Title</th>
                <th>Description</th>
                <th>Status</th>
                <th>Assigned To</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var caseItem in Cases.Items)
            {
                <tr>
                    <td>@caseItem.Id</td>
                    <td>@caseItem.Tittle</td>
                    <td>@caseItem.Description</td>
                    <td>@caseItem.StatusString</td>
                    <td>@caseItem.AssignedToUserName</td>
                    <td>
                        <a href='/case/edit/@caseItem.Id' class="btn btn-outline-dark" role="button">
                            Edit
                        </a>
                        <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteCaseModal"
                                @onclick="(() => DeleteCase(caseItem.Id))">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <Pagination PageIndex="@Cases.PageIndex" TotalCount="@Cases.TotalCount" PageSize="@filter.PageSize" OnPageChanged="@OnPageChanged" />

    <div class="modal fade" id="deleteCaseModal" data-bs-backdrop="static" data-bs-keyboard="false">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-body">
                    <p>Are you sure you want to delete this case?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger">Delete</button>
                </div>
            </div>
        </div>
    </div>
}
@code {
    private PaginatedList<CaseDto> Cases { get; set; } = new PaginatedList<CaseDto>(new List<CaseDto>(), 1, 10, 0);
    private FilterCaseDto filter { get; set; } = new FilterCaseDto
        {
            CurrentPage = 1,
            PageSize = 10
        };
    private bool isLoading = false;
    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await LoadCases();
        isLoading = false;
    }

    protected async Task LoadCases()
    {
        var apiUrl = "api/cases?" +
          $"SearchString={filter.SearchString}&" +
          $"CreateFrom={filter.CreateFrom?.ToString("yyyy-MM-dd")}&" +
          $"CreateTo={filter.CreateTo?.ToString("yyyy-MM-dd")}&" +
          $"AssignedToUserId={filter.AssignedToUserId}&" +
          $"CurrentPage={filter.CurrentPage}&" +
          $"PageSize={filter.PageSize}";


            var response = await HttpClient.GetFromJsonAsync<PaginatedList<CaseDto>>(apiUrl);
            if (response is not null)
                Cases = response;
            else
                throw new Exception($"Something went wrong while getting data with : {apiUrl}");
    }
    protected async Task OnPageChanged(int newPage)
    {
        filter.CurrentPage = newPage;
        await LoadCases();
    }

    protected async Task DeleteCase(int caseId)
    {
        await HttpClient.DeleteAsync($"api/case/{caseId}");
        await LoadCases();
    }


}