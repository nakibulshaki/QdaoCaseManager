@page "/note";
@using Microsoft.AspNetCore.Authorization
@using QdaoCaseManager.Client.Shared
@using QdaoCaseManager.DTOs.Common.Models
@using QdaoCaseManager.DTOs.Notes
@attribute [Authorize]
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender:false))
@inject HttpClient HttpClient
<PageTitle>Case</PageTitle>

<div class="card mb-3">
    <div class="card-header">
        <h3>Note Data</h3>
        <p>This component demonstrates CRUD operation on note data</p>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-1">
                <a href='/note/add' class="btn btn-outline-primary" role="button">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-circle-fill" viewBox="0 0 16 16">
                        <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0M8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3z" />
                    </svg>
                    Add
                </a>
            </div>
            <div class="col-md-11">
                <input type="text" class="form-control" placeholder="Search note by content"
                 @bind="filter.SearchString" @bind:event="oninput" @onkeyup="LoadNotes" />
            </div>
        </div>
    </div>
</div>

@if (Notes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-responsive">
        <thead class="table-group-divider">
            <tr>
                <th>ID</th>
                <th>Content</th>
                <th>CaseTittle</th>
                <th>CreateDate</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var caseItem in Notes.Items)
            {
                <tr>
                    <td>@caseItem.Id</td>
                    <td>@caseItem.Content</td>
                    <td>@caseItem.CaseTittle</td>
                    <td>@caseItem.Created.ToLocalTime()</td>
                    <td>
                        <a href='/note/edit/@caseItem.Id' class="btn btn-outline-dark" role="button">
                            Edit
                        </a>
                        <button class="btn btn-danger" data-toggle="modal" data-target="#deleteConfirmationModal" 
                        @onclick="(() => OpenDeleteModal(caseItem.Id))">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <Pagination PageIndex="@Notes.PageIndex" TotalCount="@Notes.TotalCount" PageSize="@filter.PageSize" OnPageChanged="@OnPageChanged" />
   <!-- Import the DeleteConfirmation component -->
    <Confirmation Title="Delete Confirmation" Message="Are you sure you want to delete?" OnConfirmDelete="DeleteCase"  />
  }
@code {
    private PaginatedList<NoteDto> Notes { get; set; } =
    new PaginatedList<NoteDto>
   (new List<NoteDto>(), 1, 10, 0);


    private FilterNoteDto filter { get; set; } = new FilterNoteDto
        {
            CurrentPage = 1,
            PageSize = 10
        };

    protected override async Task OnInitializedAsync()
    {
        await LoadNotes();
    }

    protected async Task LoadNotes()
    {
        var apiUrl = "api/notes?" +
          $"SearchString={filter.SearchString}&" +
          $"CurrentPage={filter.CurrentPage}&" +
          $"PageSize={filter.PageSize}";


        var response = await HttpClient.GetFromJsonAsync<PaginatedList<NoteDto>>(apiUrl);
        if (response is not null)
            Notes = response;
        else
            throw new Exception($"Something went wrong while getting data with : {apiUrl}");
    }
    protected async Task OnPageChanged(int newPage)
    {
        filter.CurrentPage = newPage;
        await LoadNotes();
    }


    private int selectedCaseId = 0;
    private void OpenDeleteModal(int caseId) => selectedCaseId = caseId;

    private async Task DeleteCase()
    {
        await HttpClient.DeleteAsync($"api/notes/{selectedCaseId}");
        await LoadNotes();
    }
   
}