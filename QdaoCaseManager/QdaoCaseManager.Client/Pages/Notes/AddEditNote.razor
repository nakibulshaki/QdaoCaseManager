﻿
@page "/note/add"
@page "/note/edit/{id:int}"
@using QdaoCaseManager.DTOs.Common.Models
@using QdaoCaseManager.DTOs.Notes
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender:false))
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<div class="row">
    <div class="col-md-6 offset-3">
        <div class="card">
            <div class="card-header">
                @if (Id == null)
                {
                    <h3>Create Note</h3>
                    <PageTitle>Create  Note</PageTitle>
                }
                else
                {
                    <h3>Edit Note</h3>
                    <PageTitle>Create Note </PageTitle>

                }
            </div>
            <EditForm Model="@NoteDto" OnValidSubmit="HandleSubmit">

                <div class="card-body">
                    <div class="row">
                        <DataAnnotationsValidator />
                        <div class="col-md-12">
                            <label for="NoteDto.Tittle" class="form-label">Content</label>
                            <div class="">
                                <InputTextArea class="form-control" @bind-Value="@NoteDto.Content" />
                            </div>
                            <ValidationMessage For="@(() => NoteDto.Content)" />
                        </div>
                        <div class="col-md-12 mb-3">
                            <label for="CaseId" class="form-label">Case</label>
                            <div class="">
                                <InputSelect class="form-control" id="AssignedToUserId" @bind-Value="@NoteDto.CaseId">
                                    <option value="null">Select Case</option>
                                    @foreach (var user in CaseSelectList)
                                    {
                                        <option value="@user.Value">@user.Text</option>
                                    }
                                </InputSelect>
                            </div>
                            <ValidationMessage For="@(() => NoteDto.CaseId)" />
                        </div>

                    </div>


                </div>
                <div class="card-footer float-right">
                    <div class="form-group float-end">
                        <button type="submit" class="btn btn-primary">Save</button>
                        <button type="button" class="btn btn-light" @onclick="HandleCancel">Cancel</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }
    public CreateUpdateNoteDto NoteDto { get; set; } = new();

    public IList<SelectItem> CaseSelectList = new List<SelectItem>();

    protected override async Task OnParametersSetAsync()
    {
        await LoadNoteCaseSelectList();
        if (Id is not null)
        {
            var result = await HttpClient.GetFromJsonAsync<CreateUpdateNoteDto>($"api/notes/{(int)Id}");
            if (result is not null) NoteDto = result;
        }

    }
    protected async Task HandleSubmit()
    {
        if (Id is not null)
        {
            await HttpClient.PutAsJsonAsync($"api/notes/{Id}", NoteDto);

        }
        else
        {
            await HttpClient.PostAsJsonAsync("api/notes", NoteDto);

        }
        NavigationManager.NavigateTo("/note");
    }

    protected async Task HandleCancel()
    {
        NavigationManager.NavigateTo("/note");
    }
    protected async Task LoadNoteCaseSelectList()
    {
        var response = await HttpClient
                            .GetFromJsonAsync<IList<SelectItem>>(
                             "api/notes/getCaseSelectListItems");

        if (response is not null)
            CaseSelectList = response;
        else
            throw new Exception($"Something went wrong while getting case user data.");
    }
}
